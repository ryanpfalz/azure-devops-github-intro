trigger: none

pool:
  vmImage: "windows-latest"

stages:
  - stage: Stage1
    displayName: "Stage 1"
    jobs:
      - job: CreatePR
        displayName: "Create PR"
        steps:
          - powershell: |
              # Set variables
              $organization = "ryanpfalz"
              $project = "Sandbox"
              $repository = "AzDO-Demo"
              $sourceBranch = "test-pr"
              $targetBranch = "main"
              $title = "Automated"
              $description = "Pull Request Description"

              # Get + format token
              $user = "prcreation"
              $userPat = $user + ":$(System.AccessToken)"
              $encodedBytes = [System.Text.Encoding]::UTF8.GetBytes($userPat)
              $encodedPat = [System.Convert]::ToBase64String($encodedBytes)

              # Set headers
              $headers = @{
                  "Authorization" = "Basic $encodedPat"
                  "Content-Type"  = "application/json"
              }

              # Get repo ID
              $repoUrl = "https://dev.azure.com/$organization/$project/_apis/git/repositories?api-version=7.0"
              $repoResponse = Invoke-RestMethod -Uri $repoUrl -Method Get -Headers $headers
              $repo = $repoResponse.value | Where-Object { $_.name -eq $repository }
              $repoId = $repo.id

              # Create a Pull Request
              $pullRequestUrl = "https://dev.azure.com/$organization/$project/_apis/git/repositories/$repoId/pullrequests?api-version=7.0"
              $pullRequestJson = @{
                  sourceRefName = "refs/heads/$sourceBranch"
                  targetRefName = "refs/heads/$targetBranch"
                  title         = $title
                  description   = $description
              } | ConvertTo-Json

              $pullRequestResult = Invoke-RestMethod -Method POST -Headers $headers -Body $pullRequestJson -Uri $pullRequestUrl;
              $pullRequestId = $pullRequestResult.pullRequestId

              $prUrl = "https://dev.azure.com/$organization/$project/_git/$repository/pullrequest/$($pullRequestId)"

              # set pipeline variable
              Write-Host "##vso[task.setvariable variable=prId;isOutput=true;]$pullRequestId"
              Write-Host "##vso[task.setvariable variable=prUrl;isOutput=true;]$prUrl"

              # Set PR to auto-complete
              $setAutoCompleteJson = @{
                  "autoCompleteSetBy" = @{
                      "id" = $pullRequestResult.createdBy.id
                  }
                  "completionOptions" = @{       
                      "deleteSourceBranch" = $False
                      "bypassPolicy"       = $False
                  }
              } | ConvertTo-Json

              $pullRequestUpdateUrl = ('pullRequests/' + $pullRequestId + '?api-version=5.1')
              $setAutoCompleteResult = Invoke-RestMethod -Method PATCH -Headers $headers -Body $setAutoCompleteJson -Uri "https://dev.azure.com/$organization/$project/_apis/git/repositories/$repoId/$pullRequestUpdateUrl"
            displayName: "Create PR"
            name: CreatePRScript

      - job: PrintVariables
        dependsOn: CreatePR
        displayName: "Print Variables"
        variables:
          pullRequestId: $[dependencies.CreatePR.outputs['CreatePRScript.prId']]
          pullRequestUrl: $[dependencies.CreatePR.outputs['CreatePRScript.prUrl']]
        steps:
          - powershell: |
              Write-Host $(pullRequestId)
              Write-Host $(pullRequestUrl)
            displayName: "Print Variables"

  - stage: Stage2
    displayName: "Stage 2"
    dependsOn: Stage1
    condition: succeeded('Stage1')
    jobs:
      - deployment: PRComment
        displayName: "PR Comment (requires approval)"
        # environment: PRAutomationApproval # this is whatever environment you want to tie your approval group to
        variables:
          pullRequestId: $[stageDependencies.Stage1.CreatePR.outputs['CreatePRScript.prId']]
        strategy:
          runOnce:
            deploy:
              steps:
                - powershell: |
                    # Set variables
                    $organization = "ryanpfalz"
                    $project = "Sandbox"
                    $repository = "AzDO-Demo"
                    $buildId = $(Build.BuildId)

                    $statusCode = 5 # https://learn.microsoft.com/en-us/dotnet/api/microsoft.teamfoundation.sourcecontrol.webapi.commentthreadstatus?view=azure-devops-dotnet


                    # Get + format token 
                    $user = "prcomment"
                    $userPat = $user + ":$(System.AccessToken)"
                    $encodedBytes = [System.Text.Encoding]::UTF8.GetBytes($userPat)
                    $encodedPat = [System.Convert]::ToBase64String($encodedBytes)

                    # Set headers
                    $headers = @{
                        "Authorization" = "Basic $encodedPat"
                        "Content-Type"  = "application/json"
                    }

                    # comment build URL
                    $buildUrl = "https://dev.azure.com/$organization/$project/_build/results?buildId=$buildId"

                    $markdown = @"
                    Pipeline: [$buildUrl]($buildUrl)  
                    "@

                    #Build the JSON body up
                    $body = @"
                    {
                        "comments": [
                          {
                            "parentCommentId": 0,
                            "content": "$markdown",
                            "commentType": 1
                          }
                        ],
                        "status": $statusCode 
                      }
                    "@

                    # https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-request-threads/create?view=azure-devops-rest-7.0&tabs=HTTP
                    $url = "https://dev.azure.com/$organization/$project/_apis/git/repositories/$repository/pullRequests/$(pullRequestId)/threads?api-version=7.0"

                    Write-Host $url
                    $response = Invoke-RestMethod -Uri $url -Method POST -Headers $headers -Body $body

                    Write-Host $response
                  displayName: "PR Comment"

      - deployment: PRComplete
        displayName: "PR Complete (requires approval)"
        environment: PRAutomationApproval # this is whatever environment you want to tie your approval group to
        variables:
          pullRequestId: $[stageDependencies.Stage1.CreatePR.outputs['CreatePRScript.prId']]
        strategy:
          runOnce:
            deploy:
              steps:
                - powershell: |
                    $completedBy = "ryanpfalz@microsoft.com"
                    $organization = "ryanpfalz"
                    $project = "Sandbox"
                    $repository = "AzDO-Demo"

                    # Get + format token 
                    $user = "automation"
                    $userPat = $user + ":$(apiPatVar)"
                    $encodedBytes = [System.Text.Encoding]::UTF8.GetBytes($userPat)
                    $encodedPat = [System.Convert]::ToBase64String($encodedBytes)

                    # Set headers
                    $headers = @{
                        "Authorization" = "Basic $encodedPat"
                        "Content-Type"  = "application/json"
                    }

                    # Get repo ID
                    $repoUrl = "https://dev.azure.com/$organization/$project/_apis/git/repositories?api-version=7.0"
                    $repoResponse = Invoke-RestMethod -Uri $repoUrl -Method Get -Headers $headers
                    $repo = $repoResponse.value | Where-Object { $_.name -eq $repository }
                    $repoId = $repo.id

                    # Get identity
                    $identityUrl = "https://vssps.dev.azure.com/$organization/_apis/identities?searchFilter=General&filterValue=$completedBy&queryMembership=None&api-version=6.0"
                    $identityResponse = Invoke-RestMethod -Uri $identityUrl -Method Get -Headers $headers
                    $identity = $identityResponse.value
                    $identityId = $identity.id

                    # Approve PR
                    $approveJson = @{
                        "vote" = 10
                    } | ConvertTo-Json

                    $pullRequestApproveUrl = ('pullRequests/' + $(pullRequestId) + '/reviewers/' + $identityId + '?api-version=5.1')
                    $approveResult = Invoke-RestMethod -Method PUT -Headers $headers -Body $approveJson -Uri "https://dev.azure.com/$organization/$project/_apis/git/repositories/$repoId/$pullRequestApproveUrl"

                  displayName: "PR Complete"
